// <auto-generated />
using System;
using BookShopApplication.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BookShopApplication.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.17")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BookShopApplication.Data.Models.ApplicationRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("BookShopApplication.Data.Models.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("User's first name");

                    b.Property<string>("LastName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("User's last name");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("44444444-4444-4444-4444-444444444444"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "08323523-2771-412f-a129-9c0854056f65",
                            Email = "manager@bookshop.com",
                            EmailConfirmed = true,
                            FirstName = "Manager",
                            LastName = "User",
                            LockoutEnabled = false,
                            NormalizedEmail = "MANAGER@BOOKSHOP.COM",
                            NormalizedUserName = "MANAGER@BOOKSHOP.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEIli8dEu0QKxc7/GmO81VvJVUS8hTB3uYZ7KnkLNMms4uutg5L9Klj8v3tP0FTBFWw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8d46e217-78f3-4fdd-809e-1ff3a4f870c4",
                            TwoFactorEnabled = false,
                            UserName = "manager@bookshop.com"
                        });
                });

            modelBuilder.Entity("BookShopApplication.Data.Models.Book", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AuthorName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasComment("The Author's name in the Book entity");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasComment("Description of the Book entity");

                    b.Property<Guid>("GenreId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Foreign key of Genre entity");

                    b.Property<string>("ImagePath")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasComment("The image's path");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Tells if the Book is Soft Deleted or not");

                    b.Property<int>("PagesNumber")
                        .HasColumnType("int")
                        .HasComment("Pages number in the Book entity");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,4)")
                        .HasComment("Price of the Book entity");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasComment("Title of the Book entity");

                    b.HasKey("Id");

                    b.HasIndex("GenreId");

                    b.ToTable("Books", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            AuthorName = "Tolkien",
                            Description = "A fantasy book",
                            GenreId = new Guid("11111111-1111-1111-1111-111111111111"),
                            ImagePath = "/images/books/TheHobbitBookCover.jpg",
                            IsDeleted = false,
                            PagesNumber = 310,
                            Price = 15.99m,
                            Title = "The Hobbit"
                        },
                        new
                        {
                            Id = new Guid("bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb"),
                            AuthorName = "Frank Herbert",
                            Description = "A sci-fi classic",
                            GenreId = new Guid("22222222-2222-2222-2222-222222222222"),
                            ImagePath = "/images/books/DuneBookCover.jpg",
                            IsDeleted = false,
                            PagesNumber = 412,
                            Price = 19.99m,
                            Title = "Dune"
                        },
                        new
                        {
                            Id = new Guid("cccccccc-cccc-cccc-cccc-cccccccccccc"),
                            AuthorName = "Arthur Conan Doyle",
                            Description = "Mystery detective",
                            GenreId = new Guid("33333333-3333-3333-3333-333333333333"),
                            ImagePath = "/images/books/SherlockHolmesBookCover.jpg",
                            IsDeleted = false,
                            PagesNumber = 230,
                            Price = 12.99m,
                            Title = "Sherlock Holmes"
                        },
                        new
                        {
                            Id = new Guid("dddddddd-dddd-dddd-dddd-dddddddddddd"),
                            AuthorName = "Orson Scott Card",
                            Description = "Sci-fi military novel",
                            GenreId = new Guid("22222222-2222-2222-2222-222222222222"),
                            ImagePath = "/images/books/Ender'sGameBookCover.jpg",
                            IsDeleted = false,
                            PagesNumber = 324,
                            Price = 14.99m,
                            Title = "Ender's Game"
                        },
                        new
                        {
                            Id = new Guid("eeeeeeee-eeee-eeee-eeee-eeeeeeeeeeee"),
                            AuthorName = "Patrick Rothfuss",
                            Description = "Fantasy epic",
                            GenreId = new Guid("11111111-1111-1111-1111-111111111111"),
                            ImagePath = "/images/books/TheNameOfTheWindBookCover.jpg",
                            IsDeleted = false,
                            PagesNumber = 662,
                            Price = 18.99m,
                            Title = "The Name of the Wind"
                        },
                        new
                        {
                            Id = new Guid("ffffffff-ffff-ffff-ffff-ffffffffffff"),
                            AuthorName = "Arthur Conan Doyle",
                            Description = "A thrilling mystery novel",
                            GenreId = new Guid("33333333-3333-3333-3333-333333333333"),
                            ImagePath = "/images/books/TheHoundOfTheBaskervillesBookCover.jpg",
                            IsDeleted = false,
                            PagesNumber = 256,
                            Price = 10.99m,
                            Title = "The Hound of the Baskervilles"
                        },
                        new
                        {
                            Id = new Guid("11111111-2222-3333-4444-555555555555"),
                            AuthorName = "Isaac Asimov",
                            Description = "Sci-fi foundation of a galactic empire",
                            GenreId = new Guid("22222222-2222-2222-2222-222222222222"),
                            ImagePath = "/images/books/FoundationBookCover.jpg",
                            IsDeleted = false,
                            PagesNumber = 296,
                            Price = 16.99m,
                            Title = "Foundation"
                        });
                });

            modelBuilder.Entity("BookShopApplication.Data.Models.BookInShop", b =>
                {
                    b.Property<Guid>("BookId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ShopId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("BookId", "ShopId");

                    b.HasIndex("ShopId");

                    b.ToTable("BookInShops", (string)null);

                    b.HasData(
                        new
                        {
                            BookId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            ShopId = new Guid("44444444-4444-4444-4444-444444444444")
                        },
                        new
                        {
                            BookId = new Guid("bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb"),
                            ShopId = new Guid("44444444-4444-4444-4444-444444444444")
                        },
                        new
                        {
                            BookId = new Guid("cccccccc-cccc-cccc-cccc-cccccccccccc"),
                            ShopId = new Guid("44444444-4444-4444-4444-444444444444")
                        },
                        new
                        {
                            BookId = new Guid("dddddddd-dddd-dddd-dddd-dddddddddddd"),
                            ShopId = new Guid("55555555-5555-5555-5555-555555555555")
                        },
                        new
                        {
                            BookId = new Guid("eeeeeeee-eeee-eeee-eeee-eeeeeeeeeeee"),
                            ShopId = new Guid("55555555-5555-5555-5555-555555555555")
                        },
                        new
                        {
                            BookId = new Guid("ffffffff-ffff-ffff-ffff-ffffffffffff"),
                            ShopId = new Guid("55555555-5555-5555-5555-555555555555")
                        },
                        new
                        {
                            BookId = new Guid("11111111-2222-3333-4444-555555555555"),
                            ShopId = new Guid("55555555-5555-5555-5555-555555555555")
                        },
                        new
                        {
                            BookId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            ShopId = new Guid("66666666-6666-6666-6666-666666666666")
                        },
                        new
                        {
                            BookId = new Guid("dddddddd-dddd-dddd-dddd-dddddddddddd"),
                            ShopId = new Guid("66666666-6666-6666-6666-666666666666")
                        },
                        new
                        {
                            BookId = new Guid("ffffffff-ffff-ffff-ffff-ffffffffffff"),
                            ShopId = new Guid("66666666-6666-6666-6666-666666666666")
                        });
                });

            modelBuilder.Entity("BookShopApplication.Data.Models.CartItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BookId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Foreign key of Book");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Tells if it's deleted or not");

                    b.Property<bool>("IsPurchased")
                        .HasColumnType("bit")
                        .HasComment("Tells if it's bought or not");

                    b.Property<int>("Quantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1)
                        .HasComment("Number of the same items to buy");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Foreign key of ApplicationUser");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("UserId");

                    b.ToTable("CartItems", (string)null);
                });

            modelBuilder.Entity("BookShopApplication.Data.Models.Genre", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasComment("Description of the Genre entity");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Tells if the Genre is Soft Deleted or not");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasComment("Name of the Genre entity");

                    b.HasKey("Id");

                    b.ToTable("Genres", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111111"),
                            Description = "Fantasy genre",
                            IsDeleted = false,
                            Name = "Fantasy"
                        },
                        new
                        {
                            Id = new Guid("22222222-2222-2222-2222-222222222222"),
                            Description = "Science Fiction",
                            IsDeleted = false,
                            Name = "Sci-Fi"
                        },
                        new
                        {
                            Id = new Guid("33333333-3333-3333-3333-333333333333"),
                            Description = "Mystery genre",
                            IsDeleted = false,
                            Name = "Mystery"
                        });
                });

            modelBuilder.Entity("BookShopApplication.Data.Models.Location", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("Address line");

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasComment("Name of the City in Location entity");

                    b.Property<string>("CountryName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasComment("Name of the Country in Location entity");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Tells if the Location is Soft Deleted or not");

                    b.Property<double>("Latitude")
                        .HasColumnType("float")
                        .HasComment("Latitude coordinate of the Shop");

                    b.Property<double>("Longitude")
                        .HasColumnType("float")
                        .HasComment("Longitude coordinate of the Shop");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("PostalCode in Location entity");

                    b.HasKey("Id");

                    b.ToTable("Locations", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("99999999-0000-0000-0000-000000000001"),
                            Address = "123 Broadway Ave, Manhattan",
                            CityName = "New York",
                            CountryName = "USA",
                            IsDeleted = false,
                            Latitude = 40.712800000000001,
                            Longitude = -74.006,
                            ZipCode = "10001"
                        },
                        new
                        {
                            Id = new Guid("99999999-0000-0000-0000-000000000002"),
                            Address = "456 Brick Lane, Shoreditch",
                            CityName = "London",
                            CountryName = "UK",
                            IsDeleted = false,
                            Latitude = 51.507399999999997,
                            Longitude = -0.1278,
                            ZipCode = "E1 6AN"
                        },
                        new
                        {
                            Id = new Guid("99999999-0000-0000-0000-000000000003"),
                            Address = "789 King St W, Downtown",
                            CityName = "Toronto",
                            CountryName = "Canada",
                            IsDeleted = false,
                            Latitude = 43.653199999999998,
                            Longitude = -79.383200000000002,
                            ZipCode = "M5V"
                        });
                });

            modelBuilder.Entity("BookShopApplication.Data.Models.Shop", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasComment("Description of the Shop entity");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasComment("Tells if the Shop is Soft Deleted or not");

                    b.Property<Guid>("LocationId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Foreign key of the Location entity");

                    b.Property<Guid>("ManagerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasComment("Name of the Shop entity");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.HasIndex("ManagerId");

                    b.ToTable("Shops", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("44444444-4444-4444-4444-444444444444"),
                            Description = "Books in NY",
                            IsDeleted = false,
                            LocationId = new Guid("99999999-0000-0000-0000-000000000001"),
                            ManagerId = new Guid("44444444-4444-4444-4444-444444444444"),
                            Name = "NY Bookstore"
                        },
                        new
                        {
                            Id = new Guid("55555555-5555-5555-5555-555555555555"),
                            Description = "Books in London",
                            IsDeleted = false,
                            LocationId = new Guid("99999999-0000-0000-0000-000000000002"),
                            ManagerId = new Guid("44444444-4444-4444-4444-444444444444"),
                            Name = "London Reads"
                        },
                        new
                        {
                            Id = new Guid("66666666-6666-6666-6666-666666666666"),
                            Description = "Books in Toronto",
                            IsDeleted = false,
                            LocationId = new Guid("99999999-0000-0000-0000-000000000003"),
                            ManagerId = new Guid("44444444-4444-4444-4444-444444444444"),
                            Name = "Toronto Pages"
                        });
                });

            modelBuilder.Entity("BookShopApplication.Data.Models.WishlistItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BookId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Foreign key of Book");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Foreign key of ApplicationUser");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("UserId");

                    b.ToTable("WishlistItems", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("BookShopApplication.Data.Models.Book", b =>
                {
                    b.HasOne("BookShopApplication.Data.Models.Genre", "Genre")
                        .WithMany("Books")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("BookShopApplication.Data.Models.BookInShop", b =>
                {
                    b.HasOne("BookShopApplication.Data.Models.Book", "Book")
                        .WithMany("BookInShops")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookShopApplication.Data.Models.Shop", "Shop")
                        .WithMany("BooksInShop")
                        .HasForeignKey("ShopId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Shop");
                });

            modelBuilder.Entity("BookShopApplication.Data.Models.CartItem", b =>
                {
                    b.HasOne("BookShopApplication.Data.Models.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BookShopApplication.Data.Models.ApplicationUser", "User")
                        .WithMany("Cart")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BookShopApplication.Data.Models.Shop", b =>
                {
                    b.HasOne("BookShopApplication.Data.Models.Location", "Location")
                        .WithMany("Shops")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookShopApplication.Data.Models.ApplicationUser", "Manager")
                        .WithMany("ManagedShops")
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Location");

                    b.Navigation("Manager");
                });

            modelBuilder.Entity("BookShopApplication.Data.Models.WishlistItem", b =>
                {
                    b.HasOne("BookShopApplication.Data.Models.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BookShopApplication.Data.Models.ApplicationUser", "User")
                        .WithMany("Wishlist")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("BookShopApplication.Data.Models.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("BookShopApplication.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("BookShopApplication.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("BookShopApplication.Data.Models.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookShopApplication.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("BookShopApplication.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BookShopApplication.Data.Models.ApplicationUser", b =>
                {
                    b.Navigation("Cart");

                    b.Navigation("ManagedShops");

                    b.Navigation("Wishlist");
                });

            modelBuilder.Entity("BookShopApplication.Data.Models.Book", b =>
                {
                    b.Navigation("BookInShops");
                });

            modelBuilder.Entity("BookShopApplication.Data.Models.Genre", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("BookShopApplication.Data.Models.Location", b =>
                {
                    b.Navigation("Shops");
                });

            modelBuilder.Entity("BookShopApplication.Data.Models.Shop", b =>
                {
                    b.Navigation("BooksInShop");
                });
#pragma warning restore 612, 618
        }
    }
}
