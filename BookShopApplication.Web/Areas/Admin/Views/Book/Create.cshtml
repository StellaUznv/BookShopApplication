@model BookShopApplication.Web.ViewModels.Book.CreateBookViewModel
@using static BookShopApplication.GCommon.ValidationConstraints.ModelValidationConstraints.BookConstraints
@using static BookShopApplication.GCommon.ValidationErrorMessages.ModelErrorMessages.BookMessages
@{
    ViewData["Title"] = "Add Book to Shop";
}

<h2 class="text-center mb-4">Add New Book to Shop</h2>

<form asp-action="Create" method="post" enctype="multipart/form-data" class="border p-4 rounded shadow-sm bg-light">
    <input type="hidden" asp-for="ShopId" />

    <div class="row g-3">
        <div class="col-md-6">
            <label asp-for="Title" class="form-label fw-bold">Title</label>
            <input asp-for="Title" class="form-control" />
            <span asp-validation-for="Title" class="text-danger"></span>
        </div>

        <div class="col-md-6">
            <label asp-for="Author" class="form-label fw-bold">Author</label>
            <input asp-for="Author" class="form-control" />
            <span asp-validation-for="Author" class="text-danger"></span>
        </div>

        <div class="col-md-12">
            <label asp-for="Description" class="form-label fw-bold">Description</label>
            <textarea asp-for="Description" class="form-control" rows="4"></textarea>
            <span asp-validation-for="Description" class="text-danger"></span>
        </div>

        <div class="col-md-4">
            <label asp-for="Price" class="form-label fw-bold">Price</label>
            <input asp-for="Price" class="form-control" type="number" step="0.01" />
            <span asp-validation-for="Price" class="text-danger"></span>
        </div>

        <div class="col-md-4">
            <label asp-for="PagesNumber" class="form-label fw-bold">Pages</label>
            <input asp-for="PagesNumber" class="form-control" />
            <span asp-validation-for="PagesNumber" class="text-danger"></span>
        </div>

        <div class="mb-3">
            <label asp-for="ImageFile" class="form-label">Upload Book Image</label>
            <input asp-for="ImageFile"
                   class="form-control"
                   type="file"
                   accept="image/*"
                   id="ImageFile"
                   data-allowed-extensions="@string.Join(",", AllowedExtensions)"
                   data-max-size="@FileMaxSize"
                   data-extension-error="@FileExtensionErrorMessage"
                   data-size-error="@FileSizeErrorMessage" />
            <span asp-validation-for="ImageFile" class="text-danger"></span>
        </div>

        <div class="col-md-6">
            <label asp-for="GenreId" class="form-label fw-bold">Select Genre</label>
            <select asp-for="GenreId" asp-items="Model.Genres" class="form-select">
                <option value="">-- Select Genre --</option>
            </select>
            <span asp-validation-for="GenreId" class="text-danger"></span>
            <button type="button" class="btn btn-link p-0 mt-1" id="toggleNewGenre">+ Add New Genre</button>
        </div>
    </div>

    <div id="newGenreForm" class="border p-3 rounded bg-light d-none">
        <h5>Add New Genre</h5>
        <div class="mb-2">
            <input type="text" id="NewGenreName" class="form-control" placeholder="Genre Name" />
            <span class="text-danger" id="NewGenreNameError"></span>
        </div>
        <div class="mb-2">
            <textarea id="NewGenreDescription" class="form-control" placeholder="Genre Description"></textarea>
            <span class="text-danger" id="NewGenreDescriptionError"></span>
        </div>
        <button type="button" class="btn btn-outline-success" id="submitNewGenre">Add Genre</button>
        <div class="text-success mt-2 d-none" id="newGenreSuccess">Genre added successfully!</div>
    </div>

    <div class="mt-4 text-end">
        <button type="submit" class="btn btn-primary btn-lg">Add Book</button>
        <a asp-action="Details" asp-controller="Shop" asp-route-id="@Model.ShopId" class="btn btn-secondary btn-lg">Cancel</a>
    </div>
</form>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    <script>
        document.getElementById("toggleNewGenre").addEventListener("click", function () {
            document.getElementById("newGenreForm").classList.toggle("d-none");
        });

        document.getElementById("submitNewGenre").addEventListener("click", function () {
            const name = document.getElementById("NewGenreName").value.trim();
            const description = document.getElementById("NewGenreDescription").value.trim();
            const token = document.querySelector('input[name="__RequestVerificationToken"]')?.value;

            // Clear any previous errors
            document.getElementById("NewGenreNameError").textContent = "";
            document.getElementById("NewGenreDescriptionError").textContent = "";

            fetch('/Genre/Create', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': token,
                    'X-Requested-With': 'XMLHttpRequest'
                },
                body: JSON.stringify({
                    name: name,
                    description: description,
                    id: crypto.randomUUID()
                })
            })
            .then(async res => {
                const data = await res.json();

                if (!res.ok) {
                    if (data.errors) {
                        if (data.errors.Name) {
                            document.getElementById("NewGenreNameError").textContent = data.errors.Name[0];
                        }
                        if (data.errors.Description) {
                            document.getElementById("NewGenreDescriptionError").textContent = data.errors.Description[0];
                        }
                    } else if (data.error) {
                        alert(data.error);
                    }
                    return;
                }

                // Success - add to dropdown
                if (data.success) {
                    const dropdown = document.querySelector("select[name='GenreId']");
                    const option = new Option(data.name, data.id, true, true);
                    dropdown.append(option);
                    dropdown.value = data.id;

                    document.getElementById("newGenreSuccess").classList.remove("d-none");
                    document.getElementById("newGenreForm").classList.add("d-none");
                    document.getElementById("NewGenreName").value = "";
                    document.getElementById("NewGenreDescription").value = "";
                } else {
                    alert(data.error || "Genre could not be added.");
                }
            })
            .catch(() => {
                alert("An unexpected error occurred while adding the genre.");
            });
        });
        //Image
            document.getElementById("ImageFile").addEventListener("change", function () {
        const fileInput = this;
        const file = fileInput.files[0];

        const allowedExtensions = fileInput.dataset.allowedExtensions?.split(',') || [];
        const maxSizeInBytes = parseInt(fileInput.dataset.maxSize || "2097152");
        const extensionErrorMsg = fileInput.dataset.extensionError || "Invalid file type.";
        const sizeErrorMsg = fileInput.dataset.sizeError || "File too large.";

        const errorSpan = document.querySelector("span[data-valmsg-for='ImageFile']");
        errorSpan.textContent = "";

        if (!file) return;

        const fileName = file.name.toLowerCase();
        const isValidExtension = allowedExtensions.some(ext => fileName.endsWith(ext));

        if (!isValidExtension) {
            errorSpan.textContent = extensionErrorMsg;
            fileInput.value = ""; // Clear invalid file
            return;
        }

        if (file.size > maxSizeInBytes) {
            errorSpan.textContent = sizeErrorMsg;
            fileInput.value = ""; // Clear too-large file
        }
            });
    </script>
}
