@model BookShopApplication.Web.ViewModels.Location.CreateLocationViewModel
@{
    ViewData["Title"] = "Create Location";
}

<div class="container py-4">
    <h2>@ViewData["Title"]</h2>

    <form asp-action="Create" method="post">
        <div asp-validation-summary="ModelOnly" class="text-danger"></div>

        <div class="row">
            <div class="col-md-6">
                <div class="mb-3">
                    <label asp-for="CountryName" class="form-label"></label>
                    <input asp-for="CountryName" class="form-control" id="CountryName" />
                    <span asp-validation-for="CountryName" class="text-danger"></span>
                </div>
                <div class="mb-3">
                    <label asp-for="CityName" class="form-label"></label>
                    <input asp-for="CityName" class="form-control" id="CityName" />
                    <span asp-validation-for="CityName" class="text-danger"></span>
                </div>
                <div class="mb-3">
                    <label asp-for="Address" class="form-label"></label>
                    <input asp-for="Address" class="form-control" id="Address" />
                    <span asp-validation-for="Address" class="text-danger"></span>
                </div>
                <div class="mb-3">
                    <label asp-for="ZipCode" class="form-label"></label>
                    <input asp-for="ZipCode" class="form-control" id="ZipCode" />
                    <span asp-validation-for="ZipCode" class="text-danger"></span>
                </div>
                <div class="mb-3">
                    <label asp-for="Latitude" class="form-label"></label>
                    <input asp-for="Latitude" class="form-control" id="Latitude" />
                    <span asp-validation-for="Latitude" class="text-danger"></span>
                </div>
                <div class="mb-3">
                    <label asp-for="Longitude" class="form-label"></label>
                    <input asp-for="Longitude" class="form-control" id="Longitude" />
                    <span asp-validation-for="Longitude" class="text-danger"></span>
                </div>
            </div>

            <div class="map-wrapper" style="max-width: 100%; overflow: hidden;">
                <div id="map"></div>
            </div>

        </div>

        <button type="submit" class="btn btn-primary mt-3">Save</button>
        <a asp-action="Index" class="btn btn-secondary mt-3">Back</a>
    </form>
</div>

@section Scripts {
    <script src="https://unpkg.com/leaflet/dist/leaflet.js"></script>
    <script src="https://unpkg.com/leaflet-control-geocoder/dist/Control.Geocoder.js"></script>
    <link rel="stylesheet" href="https://unpkg.com/leaflet-control-geocoder/dist/Control.Geocoder.css" />

    <script>
        const latInput = document.getElementById("Latitude");
        const lngInput = document.getElementById("Longitude");

        const defaultLat = parseFloat(latInput.value) || 42.6975;
        const defaultLng = parseFloat(lngInput.value) || 23.3242;

        const map = L.map('map').setView([defaultLat, defaultLng], 13);
        const marker = L.marker([defaultLat, defaultLng], { draggable: true }).addTo(map);

        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
            attribution: '© OpenStreetMap contributors'
        }).addTo(map);

        L.Control.geocoder({
            defaultMarkGeocode: false
        })
        .on('markgeocode', function(e) {
            const center = e.geocode.center;
            map.setView(center, 16);
            marker.setLatLng(center);
            latInput.value = center.lat.toFixed(6);
            lngInput.value = center.lng.toFixed(6);
            reverseGeocode(center.lat, center.lng);
        })
        .addTo(map);

        marker.on('dragend', async function () {
            const position = marker.getLatLng();
            latInput.value = position.lat.toFixed(6);
            lngInput.value = position.lng.toFixed(6);
            await reverseGeocode(position.lat, position.lng);
        });

        async function reverseGeocode(lat, lon) {
            const url = `https://nominatim.openstreetmap.org/reverse?lat=${lat}&lon=${lon}&format=json`;
            try {
                const response = await fetch(url, { headers: { 'Accept-Language': 'en' } });
                const data = await response.json();

                if (data && data.address) {
                    document.getElementById("Address").value = data.display_name || '';
                    document.getElementById("CityName").value = data.address.city || data.address.town || data.address.village || '';
                    document.getElementById("CountryName").value = data.address.country || '';
                    document.getElementById("ZipCode").value = data.address.postcode || '';
                }
            } catch (error) {
                console.error("Reverse geocoding failed:", error);
            }
        }

        // Initial reverse geocode if valid coordinates
        if (!isNaN(defaultLat) && !isNaN(defaultLng)) {
            reverseGeocode(defaultLat, defaultLng);
        }
    </script>
}
@section Styles {
    <style>
        html, body {
            height: auto !important;
            overflow: visible !important;
        }

        .leaflet-container {
            height: 100% !important;
            max-height: 400px;
            width: 100% !important;
            max-width: 100%;
        }

        .map-wrapper {
            width: 100%;
            height: 400px;
            max-width: 100%;
            overflow: hidden;
        }

        #map {
            height: 100% !important;
            width: 100% !important;
        }

    </style>
}


