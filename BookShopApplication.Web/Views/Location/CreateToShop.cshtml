@model BookShopApplication.Web.ViewModels.Location.CreateLocationViewModel

@{
    ViewData["Title"] = "Create Location for Shop";
}

<div class="container mt-5">
    <h2 class="mb-4">Create Location for Shop</h2>
    <form asp-action="CreateToShop" method="post" class="needs-validation" novalidate>
        <div class="mb-3">
            <label asp-for="CountryName" class="form-label"></label>
            <input asp-for="CountryName" class="form-control" />
            <span asp-validation-for="CountryName" class="text-danger"></span>
        </div>
        <div class="mb-3">
            <label asp-for="CityName" class="form-label"></label>
            <input asp-for="CityName" class="form-control" />
            <span asp-validation-for="CityName" class="text-danger"></span>
        </div>
        <div class="mb-3">
            <label asp-for="Address" class="form-label"></label>
            <input asp-for="Address" class="form-control" />
            <span asp-validation-for="Address" class="text-danger"></span>
        </div>
        <div class="mb-3">
            <label asp-for="ZipCode" class="form-label"></label>
            <input asp-for="ZipCode" class="form-control" />
            <span asp-validation-for="ZipCode" class="text-danger"></span>
        </div>
        <div class="mb-3">
            <label asp-for="Latitude" class="form-label"></label>
            <input asp-for="Latitude" class="form-control" type="number" step="any" readonly />
            <span asp-validation-for="Latitude" class="text-danger"></span>
        </div>
        <div class="mb-3">
            <label asp-for="Longitude" class="form-label"></label>
            <input asp-for="Longitude" class="form-control" type="number" step="any" readonly />
            <span asp-validation-for="Longitude" class="text-danger"></span>
        </div>
        <div class="mb-3">
            <label class="form-label">Select Location on Map</label>
            <div id="map" style="height: 300px; border: 1px solid #ccc;"></div>
        </div>
            <button type="submit" class="btn btn-sm btn-primary w-100">
                <i class="bi bi-heart"></i>Continue
            </button>
        
    </form>
</div>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    <link rel="stylesheet" href="https://unpkg.com/leaflet/dist/leaflet.css" />
    <link rel="stylesheet" href="https://unpkg.com/leaflet-control-geocoder/dist/Control.Geocoder.css" />

    <script src="https://unpkg.com/leaflet/dist/leaflet.js"></script>
    <script src="https://unpkg.com/leaflet-control-geocoder/dist/Control.Geocoder.js"></script>

    <script>
        var defaultLat = 42.7339;
        var defaultLng = 25.4858;
        var map = L.map('map').setView([defaultLat, defaultLng], 7);

        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
            maxZoom: 19,
        }).addTo(map);

        var marker;

        async function reverseGeocode(lat, lng) {
            const url = `https://nominatim.openstreetmap.org/reverse?format=json&lat=${lat}&lon=${lng}`;
            const response = await fetch(url);
            if (!response.ok) return;

            const data = await response.json();
            if (data && data.address) {
                const addr = data.address;

                const street = addr.road || addr.pedestrian || addr.neighbourhood || addr.building || "";
                const city = addr.city || addr.town || addr.village || addr.hamlet || "";
                const country = addr.country || "";
                const postcode = addr.postcode || "";

                document.getElementById("Address").value = street;
                document.getElementById("CityName").value = city;
                document.getElementById("CountryName").value = country;
                document.getElementById("ZipCode").value = postcode;
                document.getElementById("Latitude").value = lat;
                document.getElementById("Longitude").value = lng;
            }
        }

        map.on('click', function (e) {
            var lat = e.latlng.lat.toFixed(6);
            var lng = e.latlng.lng.toFixed(6);

            if (marker) {
                marker.setLatLng(e.latlng);
            } else {
                marker = L.marker(e.latlng, { draggable: true }).addTo(map);
                marker.on('dragend', function (event) {
                    var pos = event.target.getLatLng();
                    reverseGeocode(pos.lat.toFixed(6), pos.lng.toFixed(6));
                });
            }

            reverseGeocode(lat, lng);
        });

        // Add search control
        L.Control.geocoder({
            defaultMarkGeocode: false
        })
        .on('markgeocode', function(e) {
            const latlng = e.geocode.center;

            if (marker) {
                marker.setLatLng(latlng);
            } else {
                marker = L.marker(latlng, { draggable: true }).addTo(map);
                marker.on('dragend', function(event) {
                    var pos = event.target.getLatLng();
                    reverseGeocode(pos.lat.toFixed(6), pos.lng.toFixed(6));
                });
            }

            map.setView(latlng, 16);
            reverseGeocode(latlng.lat.toFixed(6), latlng.lng.toFixed(6));
        })
        .addTo(map);

        // Ensure all inputs have IDs for JS targeting
        document.getElementsByName("CountryName")[0].id = "CountryName";
        document.getElementsByName("CityName")[0].id = "CityName";
        document.getElementsByName("Address")[0].id = "Address";
        document.getElementsByName("ZipCode")[0].id = "ZipCode";
        document.getElementsByName("Latitude")[0].id = "Latitude";
        document.getElementsByName("Longitude")[0].id = "Longitude";
    </script>
}
